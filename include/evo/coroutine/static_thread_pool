// -*- C++ -*-
// Date:   Mon Mar 11 14:36:15 2024
// Mail:   lunar_ubuntu@qq.com
// Author: https://github.com/xiaoqixian

#ifndef _STATIC_THREAD_POOL_HPP
#define _STATIC_THREAD_POOL_HPP

#include "evo/coroutine/task"
#include <coroutine>
#include <mutex>
#include <condition_variable>
#include <type_traits>
#include <queue>
#include <thread>

namespace evo::coro {

class static_thread_pool {
  typedef std::coroutine_handle<> handle_t;

  struct queue_entry {
    handle_t handle;
  };

public:
  struct awaiter;

  static_thread_pool(size_t num_threads = std::thread::hardware_concurrency());

  ~static_thread_pool() {
    shutdown();
  }

  void shutdown();

  void resume_handle(handle_t h);

  /**
   * co_await pool.schedule() to switch thread
   */
  awaiter schedule() noexcept {
    return awaiter(*this);
  }

  template <typename F, typename... Args>
  task<std::invoke_result_t<F, Args...>>
  schedule(F&& f, Args&&... args) {
    // co_await to make the coroutine resumed 
    // on another thread which belongs to the 
    // thread pool.
    co_await schedule();

    if constexpr (std::is_same_v<void, std::invoke_result_t<F, Args...>>) {
      f(std::forward<Args>(args)...);
      co_return;
    } else {
      co_return f(std::forward<Args>(args)...);
    }
  }

  struct awaiter {
    awaiter(static_thread_pool& pool): pool_(pool) {}

    constexpr inline 
    bool await_ready() const noexcept {
      return false;
    }

    void await_suspend(std::coroutine_handle<> h) noexcept {
      pool_.resume_handle(h);
    }

    void await_resume() const noexcept {}

  private:
    friend class static_thread_pool;
    static_thread_pool& pool_;
  };

private:
  static void runner(static_thread_pool* pool, [[maybe_unused]] size_t id);

private:
  std::queue<queue_entry> queue_;
  std::mutex queue_latch_;
  std::condition_variable_any cv_;
  std::atomic_bool shutdown_requested_;
  std::atomic_size_t handle_num_;
  std::vector<std::thread> threads_;
};

} // namespace evo

#endif // _STATIC_THREAD_POOL_HPP
