// -*- C++ -*-
// Date:   Wed Mar 13 22:33:46 2024
// Mail:   lunar_ubuntu@qq.com
// Author: https://github.com/xiaoqixian

#ifndef _SYNC_WAIT_HPP
#define _SYNC_WAIT_HPP

#include <atomic>
#include <condition_variable>
#include <coroutine>
#include <optional>
#include <type_traits>
#include "debug.h"
#include "coroutine/concepts.hpp"
#include "coroutine/traits.hpp"
#include "coroutine/promise_base.hpp"

namespace evo {

// sync_wait_task is coroutine uses a conditional variable 
// to block the current thread, and release the conditional 
// variable on the final_suspend.
// so the current thread blocks until the coroutine is done.
template <typename>
class sync_wait_task;

class sync_wait_event {
    std::condition_variable cv;
    std::atomic_bool flag;
    std::mutex mutex;
public:
    sync_wait_event(): flag(false) {}

    void set() noexcept {
        std::lock_guard<std::mutex> lk(this->mutex);
        if (!this->flag.exchange(true, std::memory_order_release)) {
            this->cv.notify_all();
        }
    }

    void reset() noexcept {
        // always use read-modify-write operation to participate
        // in the realse sequence.
        std::lock_guard<std::mutex> lk(this->mutex);
        this->flag.exchange(false, std::memory_order_release);
    }

    void wait() noexcept {
        std::unique_lock<std::mutex> lk(this->mutex);
        this->cv.wait(lk, [this]() {
            return this->flag.load(std::memory_order_acquire);
        });
    }
};

namespace sync_wait_impl {

template <typename Ret>
struct sync_wait_promise;

} // namespace sync_wait_impl


template <typename Ret>
class sync_wait_task {
public:
    typedef sync_wait_impl::sync_wait_promise<Ret> promise_type;
    typedef std::coroutine_handle<promise_type> handle_t;

private:
    handle_t handle;

public:
    sync_wait_task(handle_t h) noexcept: handle(h) {}

    void start(std::shared_ptr<sync_wait_event> ev) {
        this->handle.promise().set_wait_handle(ev);
        this->handle.resume();
    }

    promise_type & promise() & noexcept {
        return this->handle.promise();
    }
    promise_type const& promise() const& noexcept {
        return this->handle.promise();
    }
};

namespace sync_wait_impl {

template <typename Ret>
struct sync_wait_promise: public evo::promise_base<Ret> {
    typedef std::shared_ptr<sync_wait_event> wait_handle_t;
    typedef std::coroutine_handle<sync_wait_promise<Ret>> handle_t;

    wait_handle_t wait = nullptr;

    struct final_awaiter {
        inline constexpr bool await_ready() const noexcept {
            return false;
        }

        void await_suspend(handle_t h) noexcept {
            ASSERT(h.promise().wait, "wait handle of sync_wait_promise is not set");
            // set the atomic flag to unblock the waiting thread.
            h.promise().wait->set();
        }

        inline constexpr void await_resume() const noexcept {}
    };

    inline void set_wait_handle(wait_handle_t wait) noexcept {
        this->wait = wait;
    }

    inline constexpr auto get_return_object() {
        return sync_wait_task<Ret>(
            std::coroutine_handle<sync_wait_promise<Ret>>::
                from_promise(*this)
        );
    }

    inline constexpr auto final_suspend() noexcept {
        return final_awaiter();
    }
};

} // namespace sync_wait_impl

using evo::concepts::awaiter;
using evo::concepts::awaitable;
using evo::awaitable_traits;

template <
    awaitable A, 
    typename Ret = typename awaitable_traits<A>::return_type>
static sync_wait_task<Ret> make_sync_wait_task(A&& awaitable_obj) {
    if constexpr (std::is_same_v<Ret, void>) {
        co_await std::forward<A>(awaitable_obj);
        co_return;
    } else {
        co_return co_await std::forward<A>(awaitable_obj);
    }
}

template <
    awaitable A, 
    typename Ret = typename awaitable_traits<A>::return_type>
static auto sync_wait(A&& awaitable_obj) {
    auto task = make_sync_wait_task<A>(std::forward<A>(awaitable_obj));
    auto wait_ev = 
        std::shared_ptr<sync_wait_event>(new sync_wait_event());
    task.start(wait_ev);
    wait_ev->wait();

    if constexpr (!std::is_void_v<Ret>) {
        return task.promise().result();
    }
}

} // namespace evo

#endif // _SYNC_WAIT_HPP
