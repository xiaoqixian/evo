// -*- C++ -*-
// Date:   Wed May 07 11:56:43 2025
// Mail:   lunar_ubuntu@qq.com
// Author: https://github.com/xiaoqixian

#pragma once

#include <unistd.h>
#include "evo/types"
#include <fcntl.h>
#include "evo/macros"
#include "evo/debug"
#include <utility>
#include "evo/coroutine/driver"
#include "fmt/core.h"

namespace evo::coro {

class Fd {
  int raw_fd_ {-1};
  size_t* counter_ {nullptr};

public:
  explicit Fd(int fd): raw_fd_(fd), counter_(new size_t(1)) {
    int res = ::fcntl(fd, F_SETFL, O_NONBLOCK);
    if (res == -1) {
      SYS_ERROR(fcntl);
    }

    DEBUG_ASSERT(fd >= 0, "");

    GLOBAL_DRIVER.with([fd](auto& driver) {
      driver.register_fd(fd);
    });
  }

  Fd(Fd const& other): raw_fd_(other.raw_fd_), counter_(other.counter_) {
    if (counter_) (*counter_)++;
  }
  Fd(Fd && other)
    : raw_fd_(std::exchange(other.raw_fd_, -1)),
      counter_(std::exchange(other.counter_, nullptr))
  {}

  ~Fd() {
    if (counter_ && --(*counter_) == 0) {
      delete counter_;
      counter_ = nullptr;
      DEBUG_ASSERT(raw_fd_ != -1, "");

      GLOBAL_DRIVER.with([this](auto& driver) {
        driver.deregister_fd(this->raw_fd_);
      });

      printf("close fd %d\n", raw_fd_);
      if (::close(raw_fd_) == -1) {
        FATAL("");
      }
    }
  }

  operator int() const {
    return raw_fd_;
  }
};

} // namespace evo::coro
