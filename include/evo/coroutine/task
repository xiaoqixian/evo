// -*- C++ -*-
// Date:   Thu Mar 14 23:05:29 2024
// Mail:   lunar_ubuntu@qq.com
// Author: https://github.com/xiaoqixian

#pragma once

#include <coroutine>
#include <utility>
#include "evo/coroutine/promise_base"

namespace evo::coro {

template <typename Ret = void>
class task;

namespace task_impl {

template <typename Ret>
struct task_promise;

template <typename Ret>
using task_promise_base = promise_base<Ret>;

template <typename Ret>
struct task_promise: task_promise_base<Ret> {
  std::coroutine_handle<> continuation_;

  task<Ret> get_return_object() {
    return task<Ret>(std::coroutine_handle<task_promise<Ret>>::from_promise(*this));
  }

  struct final_awaiter {
    inline constexpr bool await_ready() const noexcept {
      return false;
    }

    // technically, the typename P should be a type 
    // with a continuation. 
    // TODO: I'll try to add a constraint here.
    template <typename P>
    std::coroutine_handle<> 
    await_suspend(std::coroutine_handle<P> coro) noexcept {
      auto const& prom = coro.promise();
      if ( prom.continuation_ != nullptr ) {
        return prom.continuation_;
      } else {
        return std::noop_coroutine();
      }
    }

    inline constexpr void await_resume() const noexcept {}
  };

  // actually this is an override.
  auto final_suspend() noexcept {
    return final_awaiter();
  }

  void set_continuation(std::coroutine_handle<> c) noexcept {
    continuation_ = c;
  }
};

} // namespace task_impl

template <typename Ret>
class task {
public:
  using promise_type = task_impl::task_promise<Ret>;
  using handle_t  = std::coroutine_handle<promise_type>;

  constexpr task() noexcept: handle_(nullptr) {}
  explicit constexpr task(handle_t h) noexcept: handle_(h) {}

  task(task const&) = delete;
  task(task&& other) noexcept 
    : handle_(std::exchange(other.handle_, nullptr)) {}

  task& operator=(task const&) = delete;
  task& operator=(task&& other) noexcept {
    if (std::addressof(other) != this) {
      if (handle_ != nullptr) {
        handle_.destroy();
      }
      handle_ = std::exchange(other.handle_, nullptr);
    }
    return *this;
  }

  inline bool is_ready() const noexcept {
    return handle_ == nullptr || handle_.done();
  }

  inline operator bool() const noexcept {
    return is_ready();
  }

  inline void resume() noexcept {
    if (handle_ != nullptr) {
      handle_.resume();
    }
  }

  struct awaiter_base {
    awaiter_base(handle_t h) noexcept: handle_(h) {}

    inline bool await_ready() const noexcept {
      return false;
    }

    std::coroutine_handle<> 
    await_suspend(std::coroutine_handle<> continuation) noexcept {
      handle_.promise().set_continuation(continuation);
      return handle_;
    }
  protected:
    handle_t handle_;
  };

  template <typename R = Ret>
  struct awaiter: public awaiter_base {
    auto await_resume() const noexcept {
      return awaiter_base::handle_.promise().result();
    }
  };

  template <>
  struct awaiter<void>: public awaiter_base {
    auto await_resume() const noexcept {}
  };

  auto operator co_await() noexcept {
    return awaiter<>(handle_);
  }

  auto handle() const noexcept {
    return handle_;
  }
private:
  handle_t handle_;
};

} // namespace evo::coro
