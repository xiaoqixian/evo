// -*- C++ -*-
// Date:   Sat May 03 15:55:45 2025
// Mail:   lunar_ubuntu@qq.com
// Author: https://github.com/xiaoqixian

#include "evo/coroutine/driver"
#include "evo/coroutine/utilities"
#include <coroutine>
#include <optional>
#include "evo/coroutine/io_ops"
#include "evo/coroutine/raw_task"
#include "evo/debug"

namespace evo::coro {

template <OpAble O>
class OpAwaiter {
  O op_;

  using ready_t = decltype(std::declval<O>().invoke());
  using Ret = typename ready_t::value_type;
  std::optional<Ret> ret_opt_;
  
  using handle_t = std::coroutine_handle<>;
  handle_t handle_ {nullptr};

public:
  OpAwaiter(O op): op_(op) {}

  static void run(void* data) {
    auto* self = static_cast<OpAwaiter<O>*>(data);
    auto res = GLOBAL_DRIVER.ref().poll(self->op_, RawTask(data, &run));
    LOG_TRACE("check if op {} is ready ? {}", O::NAME, res.is_ready());

    if (res.is_ready()) {
      // LOG_TRACE("op {} is ready, resume handle", O::NAME);
      self->ret_opt_.emplace(std::move(res.value()));
      res.reset();
      DEBUG_ASSERT(!self->handle_.done(), "");
      self->handle_.resume();
    }
  }

  bool await_ready() {
    return false;
  }

  bool await_suspend(std::coroutine_handle<> h) {
    handle_ = h;

    auto res = GLOBAL_DRIVER.ref().poll(op_, RawTask(this, &run));
    if (!res.is_ready()) {
      return true;
    } else {
      ret_opt_.emplace(std::move(res.value()));
      res.reset();
      return false;
    }
  }

  Ret await_resume() noexcept {
    DEBUG_ASSERT(ret_opt_.has_value(), "");
    return std::move(ret_opt_.value());
  }
};

class Op {
public:
  inline static OpAwaiter<ops::Read> read(int fd, void* buf, size_t size) {
    return OpAwaiter(ops::Read(fd, buf, size));
  }

  inline static OpAwaiter<ops::Write> write(int fd, void const* buf, size_t size) {
    return OpAwaiter(ops::Write(fd, buf, size));
  }

  inline static OpAwaiter<ops::net::Accept> accept(int fd) {
    return OpAwaiter(ops::net::Accept(fd));
  }

  inline static OpAwaiter<ops::net::Connect> connect(int fd, ::sockaddr* addr) {
    return OpAwaiter(ops::net::Connect(fd, addr));
  }
};

} // namespace evo::coro
