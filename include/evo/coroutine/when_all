// -*- C++ -*-
// Date:   Fri Mar 15 16:30:59 2024
// Mail:   lunar_ubuntu@qq.com
// Author: https://github.com/xiaoqixian

#ifndef _WHEN_ALL_HPP
#define _WHEN_ALL_HPP

#include <atomic>
#include <memory>
#include <tuple>

#include "evo/coroutine/promise_base"
#include "evo/coroutine/traits"
#include "evo/debug"

namespace evo {


template <typename task_container_type>
struct when_all_awaitable;

template <typename Ret>
struct when_all_task;

namespace when_all_impl {

template <typename T, template <typename...> class Template>
struct is_specialization : std::false_type {};

template <template <typename...> class Template, typename... Args>
struct is_specialization<Template<Args...>, Template> : std::true_type {};

template <typename T>
concept when_all_task_spec = is_specialization<T, when_all_task>::value;

} // namespace when_all_impl

struct when_all_latch {
  explicit when_all_latch(std::size_t size): size(size) {}

  inline bool is_ready() const noexcept {
    return this->size.load(std::memory_order_acquire) == 0;
  }

  inline operator bool() const noexcept {
    return this->is_ready();
  }

  void notify_complete_one() noexcept {
    if (this->size.fetch_sub(1, std::memory_order_acq_rel) == 0) 
      this->awaiting_handle.resume();
  }

  bool try_await(std::coroutine_handle<> h) noexcept {
    this->awaiting_handle = h;
    return this->size.fetch_sub(1, std::memory_order_acq_rel) > 0;
  }
private:
  std::atomic_size_t size;
  std::coroutine_handle<> awaiting_handle;
};

using latch_ptr_t = std::shared_ptr<when_all_latch>;

template <typename Ret>
struct when_all_task_promise;

template <typename Ret>
struct when_all_task {
  typedef when_all_task_promise<Ret> promise_type;
  typedef std::coroutine_handle<promise_type> handle_t;

  explicit when_all_task(handle_t h): handle(h) {}

  inline void start(latch_ptr_t latch) {
    this->handle.promise().start(latch);
  }

private:
  handle_t handle;
};

template <typename Ret>
struct when_all_task_promise: public evo::promise_base<Ret> {
  typedef std::coroutine_handle<when_all_task_promise<Ret>> handle_t;

  void start(latch_ptr_t latch) {
    this->latch = latch;
    handle_t::from_promise(*this).resume();
  }

  auto get_return_object() {
    return when_all_task(handle_t::from_promise(*this));
  }

  auto final_suspend() noexcept {
    struct final_awaiter {
      inline constexpr bool await_ready() const noexcept {
        return false;
      }

      void await_suspend(handle_t h) noexcept {
        h.promise().latch->notify_complete_one();
      }

      void await_resume() noexcept {
        DEBUG("when_all_task_promise<non-void> await_resume");
      }
    };

    return final_awaiter();
  }

private:
  latch_ptr_t latch;
};

template <>
struct when_all_task_promise<void> {
  typedef std::coroutine_handle<when_all_task_promise<void>> handle_t;

  void start(latch_ptr_t latch) {
    this->latch = latch;
    handle_t::from_promise(*this).resume();
  }

  auto get_return_object() {
    return when_all_task(
      handle_t::from_promise(*this)
    );
  }

  auto initial_suspend() {
    return std::suspend_always();
  }

  auto final_suspend() noexcept {
    struct final_awaiter {
      inline constexpr bool await_ready() const noexcept {
        return false;
      }

      void await_suspend(handle_t h) noexcept {
        h.promise().latch->notify_complete_one();
      }

      void await_resume() noexcept {}
    };

    return final_awaiter();
  }

  void return_void() {}

  void unhandled_exception() {
    this->except_ptr = std::current_exception();
  }

private:
  latch_ptr_t latch;
  std::exception_ptr except_ptr;
};

template <typename... Tasks>
struct when_all_awaitable<std::tuple<Tasks...>> {
  explicit when_all_awaitable(Tasks&&... tasks): 
    tasks(std::forward<Tasks>(tasks)...),
    latch(std::make_shared<when_all_latch>(sizeof...(Tasks)))
  {}

  explicit when_all_awaitable(std::tuple<Tasks...>&& tp):
    tasks(std::move(tp)),
    latch(std::make_shared<when_all_latch>(sizeof...(Tasks)))
  {}

  struct awaiter {
    explicit awaiter(when_all_awaitable& a): awaitable(a) {}

    inline constexpr bool await_ready() const noexcept {
      return false;
    }

    bool await_suspend(std::coroutine_handle<> h) noexcept {
      return this->awaitable.try_await(h);
    }

    std::tuple<Tasks...>&& await_resume() noexcept {
      return std::move(this->awaitable.tasks);
    }

  private:
    when_all_awaitable& awaitable;
  };

  auto operator co_await() noexcept {
    return awaiter(*this);
  }

  bool try_await(std::coroutine_handle<> h) {
    std::apply([this](auto&&... tasks) {
      ((tasks.start(this->latch)), ...);
    }, this->tasks);
    return this->latch->try_await(h);
  }

private:
  std::tuple<Tasks...> tasks;
  latch_ptr_t latch;
};

template <
  typename Task,
  typename Ret = evo::awaitable_traits<Task>::return_type
>
static when_all_task<Ret> make_when_all_task(Task&& awaitable_obj) noexcept {
  if constexpr (std::is_void_v<Ret>) {
    co_await static_cast<Task&&>(awaitable_obj);
    co_return;
  } else {
    co_return co_await static_cast<Task&&>(awaitable_obj);
  }
}

template <typename... Tasks>
static auto when_all(Tasks&&... tasks) {
  return when_all_awaitable<std::tuple<
    when_all_task<
      typename evo::awaitable_traits<Tasks>::return_type
    >...
  >>(std::make_tuple(make_when_all_task(
    std::forward<Tasks>(tasks))...));
}

} // namespace evo


#endif // _WHEN_ALL_HPP
