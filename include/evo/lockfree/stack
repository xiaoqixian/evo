// -*- C++ -*-
// Date:   Mon Mar 11 10:36:32 2024
// Mail:   lunar_ubuntu@qq.com
// Author: https://github.com/xiaoqixian

#ifndef _LOCKFREE_STACK_HPP
#define _LOCKFREE_STACK_HPP

/// A lock-free stack
#include <atomic>
#include "concepts.h"

namespace evo {

namespace lockfree {

template <typename T>
class lockfree_stack {
    template <typename U>
    struct node {
        U data;
        node<U>* next;
        node(U const& u)
            requires evo::copy_constructible<U>
            : data(u), next(nullptr) {}

        node(U&& u)
            requires evo::move_constructible<U>
            : data(u), next(nullptr) {}
    };

    typedef node<T> node_t;
    std::atomic<node_t*> head;
public:
    void push(T const& elem) {
        node_t* new_node = new node(elem);

        new_node->next = this->head.load(std::memory_order_relaxed);

        // make new_node the new head, but only if the head is still
        // the one stored in new_node->next. 
        // If not, the new value of head is stored in new_node->next,
        // that's part of compare_exchange_weak function. And the 
        // function returns false, the loop goes around again.
        // If is, the head is stored as new_node, the function 
        // returns true, the loop breaks.
        while (!this->head.compare_exchange_weak(
            new_node->next, new_node, 
            std::memory_order_release,
            std::memory_order_relaxed
        ));
    }

    void push(T&& elem) {
        node_t* new_node = new node(elem);

        new_node->next = this->head.load(std::memory_order_relaxed);

        // make new_node the new head, but only if the head is still
        // the one stored in new_node->next. 
        // If not, the new value of head is stored in new_node->next,
        // that's part of compare_exchange_weak function. And the 
        // function returns false, the loop goes around again.
        // If is, the head is stored as new_node, the function 
        // returns true, the loop breaks.
        while (!this->head.compare_exchange_weak(
            new_node->next, new_node, 
            std::memory_order_release,
            std::memory_order_relaxed
        ));
    }

    void pop() {
        if (!this->head.load(std::memory_order_acquire))
            return;

        node_t* old_head = this->head.load(std::memory_order_relaxed);

        while (!this->head.compare_exchange_weak(
            old_head, old_head->next,
            std::memory_order_release,
            std::memory_order_relaxed
        ));
    }
};

} // namespace lockfree
} // namespace evo

#endif // _LOCKFREE_STACK_HPP
