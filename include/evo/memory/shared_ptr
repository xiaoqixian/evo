// -*- C++ -*-
// Date:   Sat Apr 13 15:41:46 2024
// Mail:   lunar_ubuntu@qq.com
// Author: https://github.com/xiaoqixian

#pragma once

#include "evo/memory/compressed_pair"
#include "evo/memory/unique_ptr"
#include <atomic>
#include <cstddef>
#include <memory>
#include <new>
#include <type_traits>
#include <utility>
#include <cassert>

namespace evo {

template <typename T>
class shared_ptr;

namespace {

template<typename T>
struct base_element_type {
  using type = T;
};

template<typename T, std::size_t N>
struct base_element_type<T[N]> {
  using type = typename base_element_type<T>::type;
};

template<typename T>
struct base_element_type<T[]> {
  using type = typename base_element_type<T>::type;
};

template <typename T>
using base_elem_t = base_element_type<T>::type;

template <typename Y, typename T>
struct bound_convertible_to_unbound: std::false_type {};

template <typename U, size_t N, typename T>
struct bound_convertible_to_unbound<U[N], T>: std::is_same<U[], std::remove_cv_t<T>> {};

template <typename Y, typename T>
concept compatible_with = std::is_convertible_v<Y*, T*> || bound_convertible_to_unbound<Y, T>::value;

template <typename Y, typename T>
concept raw_pointer_compatible_with = 
  (!std::is_array_v<T> && std::is_convertible_v<Y*, T*>) ||
  (std::is_bounded_array_v<T> && std::is_convertible_v<Y(*)[std::extent_v<T>], std::remove_extent_t<T>(*)[std::extent_v<T>]>) ||
  (std::is_unbounded_array_v<T> && std::is_convertible_v<Y(*)[], std::remove_extent_t<T>(*)[]>);

template <typename, typename Y>
struct shared_ptr_default_delete: default_delete<Y> {};

template <typename U, typename Y>
struct shared_ptr_default_delete<U[], Y>: default_delete<U[]> {};

template <typename U, size_t N, typename Y>
struct shared_ptr_default_delete<U[N], Y>: default_delete<U[]> {};

template <typename T>
void construct_at_multidimensional(T* loc) {
  if constexpr (std::is_array_v<T>) {
    constexpr auto N = std::extent_v<T>;
    T& array = *loc;
    
    for (size_t i = 0; i < N; i++) {
      construct_at_multidimensional(std::addressof(array[i]));
    }
  } else {
    new (loc) T();
  }
}

template <typename T, typename Arg>
void construct_at_multidimensional(T* loc, Arg const& arg) {
  if constexpr (std::is_array_v<T>) {
    static_assert(std::is_array_v<Arg>, "Array type cannot be initialized with a non-array type argument");
    constexpr auto N = std::extent_v<T>;
    T& array = *loc;
    
    for (size_t i = 0; i < N; i++) {
      construct_at_multidimensional(std::addressof(array[i]), arg[i]);
    }
  } else {
    new (loc) T(arg);
  }
}

template <typename T>
void construct_at_n_multidimensional(T* loc, size_t n) {
  if constexpr (std::is_array_v<T>) {
    T& array = *loc;
    
    for (size_t i = 0; i < n; i++) {
      construct_at_multidimensional(std::addressof(array[i]));
    }
  } else {
    new (loc) T();
  }
}
template <typename T, typename Arg>
void construct_at_n_multidimensional(T* loc, size_t n, Arg const& arg) {
  if constexpr (std::is_array_v<T>) {
    static_assert(std::is_array_v<Arg>, "Array type cannot be initialized with a non-array type argument");
    T& array = *loc;
    
    for (size_t i = 0; i < n; i++) {
      construct_at_multidimensional(std::addressof(array[i]), arg[i]);
    }
  } else {
    new (loc) T(arg);
  }
}

template <typename T>
void destruct_at_multidimensional(T* loc) {
  if constexpr (std::is_array_v<T>) {
    constexpr auto N = std::extent_v<T>;
    T& array = *loc;
    
    for (size_t i = N; i > 0; i--) {
      destruct_at_multidimensional(std::addressof(array[i-1]));
    }
  } else {
    loc->~T();
  }
}

template <typename T>
void destruct_at_n_multidimensional(T* loc, size_t n) {
  if constexpr (std::is_array_v<T>) {
    T& array = *loc;
    
    for (size_t i = 0; i < n; i++) {
      destruct_at_multidimensional(std::addressof(array[i]));
    }
  } else {
    loc->~T();
  }
}

class shared_count {
protected:
  std::atomic_long shared_owners_ {0};
public:
  void add_shared() noexcept {
    shared_owners_.fetch_add(1);
  }

  bool release_shared() noexcept {
    if (shared_owners_.fetch_sub(1) == 0) {
      on_zero_shared();
      return true;
    }
    return false;
  }

  long use_count() const noexcept {
    return shared_owners_.load() + 1;
  }
  
  /**
   * Inner element must be destroyed on zero shared
   */
  virtual void on_zero_shared() noexcept = 0;

protected:
  virtual ~shared_count() {}
};

class shared_weak_count: private shared_count {
  std::atomic_long shared_weak_owners_ {0};

public:
  long use_count() const noexcept {
    return shared_count::use_count();
  }

  void add_weak() noexcept {
    shared_weak_owners_.fetch_add(1);
  }

  void add_shared() noexcept {
    shared_count::add_shared();
  }

  void release_shared() {
    if (shared_count::release_shared()) {
      release_weak();
    }
  }

  bool release_weak() {
    if (shared_weak_owners_.fetch_sub(1) == 0) {
      on_zero_shared_weak();
      return true;
    }
    return false;
  }

  shared_weak_count* lock() noexcept {
    long obj_owners = shared_owners_.load();
    while (obj_owners != -1) {
      if (shared_owners_.compare_exchange_weak(obj_owners, obj_owners + 1)) {
        return this;
      }
    }
    return nullptr;
  }

private:
  /**
   * Control block must be destroyed on zero weak shared
   */
  virtual void on_zero_shared_weak() noexcept = 0;

protected:
  ~shared_weak_count() override {}
};

template <typename T, typename D>
class shared_ptr_pointer: public shared_weak_count {
  compressed_pair<T*, D> data_;
public:
  shared_ptr_pointer(T* ptr, D d): 
    data_(ptr, std::move(d)) 
  {}

  virtual void on_zero_shared() noexcept override;

  virtual void on_zero_shared_weak() noexcept override;
};

template <typename T>
class shared_ptr_emplace: public shared_weak_count {
  T storage_;

public:
  template <typename... Args>
  requires std::is_constructible_v<T, Args...>
  shared_ptr_emplace(Args&&... args): storage_(std::forward<Args>(args)...) {}
  
  virtual void on_zero_shared() noexcept override;

  virtual void on_zero_shared_weak() noexcept override;

  T* get_elem() {
    return &storage_;
  }
};

template <typename T>
struct unbound_array_ctrl_block;

template <typename T>
struct bounded_array_ctrl_block;

template <typename T>
struct unbound_array_ctrl_block<T[]>: shared_weak_count {
  unbound_array_ctrl_block(size_t) noexcept(std::is_nothrow_constructible_v<T>);

  unbound_array_ctrl_block(size_t, T const&) noexcept(std::is_nothrow_copy_constructible_v<T>);

  constexpr T* get_data() noexcept { return reinterpret_cast<T*>(data_); }

  static constexpr size_t bytes_for(size_t elements) {
    size_t bytes = sizeof(unbound_array_ctrl_block) + 
      (elements == 0 ? 0 : (elements - 1) * sizeof(T));
    constexpr size_t align = alignof(T);
    return (bytes + align - 1) & ~(align - 1);
  }

  virtual void on_zero_shared() noexcept(std::is_nothrow_destructible_v<base_elem_t<T>>) override;
  virtual void on_zero_shared_weak() noexcept override;

  ~unbound_array_ctrl_block() override {}
private:
  size_t count_;
  // put data_[1] inside an union to avoid automatic destruction
  union {
    T data_[1];
  };
};

template <typename T, size_t N>
struct bounded_array_ctrl_block<T[N]>: shared_weak_count {
  bounded_array_ctrl_block() noexcept(std::is_nothrow_constructible_v<T>) = default;
  bounded_array_ctrl_block(T const&) noexcept(std::is_nothrow_copy_constructible_v<T>);

  constexpr T* get_data() noexcept { return data_; }

  virtual void on_zero_shared() noexcept(std::is_nothrow_destructible_v<T>) override;
  virtual void on_zero_shared_weak() noexcept override;
private:
  T data_[N];
};

template <typename T, typename D>
void shared_ptr_pointer<T, D>::on_zero_shared() noexcept {
  T* ptr = data_.first();
  if (ptr) {
    data_.second()(ptr);
  }
}

template <typename T, typename D>
void shared_ptr_pointer<T, D>::on_zero_shared_weak() noexcept {
  ::operator delete(this);
}

template <typename T>
void shared_ptr_emplace<T>::on_zero_shared() noexcept {
  storage_.~T();
}

template <typename T>
void shared_ptr_emplace<T>::on_zero_shared_weak() noexcept {
  ::operator delete(this);
}

template <typename T>
unbound_array_ctrl_block<T[]>::unbound_array_ctrl_block(size_t count) noexcept(std::is_nothrow_constructible_v<T>)
  : count_(count)
{
  T* array = get_data();
  for (size_t i = 0; i < count_; i++) {
    construct_at_multidimensional(std::addressof(array[i]));
  }
}

template <typename T>
unbound_array_ctrl_block<T[]>::unbound_array_ctrl_block(size_t count, T const& u) noexcept(std::is_nothrow_copy_constructible_v<T>)
  : count_(count)
{
  T* array = get_data();
  for (size_t i = 0; i < count_; i++) {
    construct_at_multidimensional(std::addressof(array[i]), u);
  }
}

template <typename T>
void unbound_array_ctrl_block<T[]>::on_zero_shared() noexcept(std::is_nothrow_destructible_v<base_elem_t<T>>) {
  T* array = get_data();
  for (size_t i = count_; i > 0; i--) {
    destruct_at_multidimensional(std::addressof(array[i-1]));
  }
}

template <typename T>
void unbound_array_ctrl_block<T[]>::on_zero_shared_weak() noexcept {
  ::operator delete(this, std::align_val_t(alignof(unbound_array_ctrl_block<T[]>)));
}

template <typename T, size_t N>
bounded_array_ctrl_block<T[N]>::bounded_array_ctrl_block(T const& u) noexcept(std::is_nothrow_copy_constructible_v<T>) {
  construct_at_multidimensional(get_data(), u);
}

template <typename T, size_t N>
void bounded_array_ctrl_block<T[N]>::on_zero_shared() noexcept(std::is_nothrow_destructible_v<T>) {
  destruct_at_multidimensional(get_data());
}

template <typename T, size_t N>
void bounded_array_ctrl_block<T[N]>::on_zero_shared_weak() noexcept {
  ::operator delete(this);
}

} // end of anonymouse namespace

template <typename T>
class weak_ptr;

template <typename T>
class shared_ptr {
  template <typename Y>
  friend class shared_ptr;

  template <typename Y>
  friend class weak_ptr;

  using element_type = std::remove_extent_t<T>;
  using pointer = element_type*;
  using const_pointer = element_type const*;
  using reference = element_type&;
  using const_reference = element_type const&;

  pointer ptr_ {nullptr};
  shared_weak_count* ctrl_ {nullptr};
public:
  constexpr shared_ptr() noexcept = default;
  constexpr shared_ptr(std::nullptr_t) noexcept;

  template <raw_pointer_compatible_with<T> Y>
  explicit shared_ptr(Y* ptr);

  shared_ptr(shared_ptr const&) noexcept;
  shared_ptr(shared_ptr &&) noexcept;

  template <compatible_with<T> Y>
  shared_ptr(shared_ptr<Y> const&) noexcept;

  template <compatible_with<T> Y>
  shared_ptr(shared_ptr<Y> &&) noexcept;

  template <compatible_with<T> Y>
  shared_ptr(shared_ptr<Y> const&, pointer ptr) noexcept;

  template <compatible_with<T> Y>
  explicit shared_ptr(weak_ptr<Y> const&);

  ~shared_ptr() noexcept;

  shared_ptr& operator=(shared_ptr const& other) noexcept;
  shared_ptr& operator=(shared_ptr && other) noexcept;

  template <compatible_with<T> Y>
  shared_ptr& operator=(shared_ptr<Y> const& other) noexcept;

  template <compatible_with<T> Y>
  shared_ptr& operator=(shared_ptr<Y> && other) noexcept;

  pointer get() const noexcept;

  pointer operator->() noexcept;
  const_pointer operator->() const noexcept;

  T& operator*() noexcept;
  T const& operator*() const noexcept;

  reference operator[](std::ptrdiff_t idx) const;

  explicit operator bool() const noexcept;

  void swap(shared_ptr& other) noexcept;

  void reset() noexcept;

  long use_count() const noexcept;

  template <typename Y>
  bool owner_before(shared_ptr<Y> const&) const noexcept;

  template <typename Y>
  bool owner_before(weak_ptr<Y> const&) const noexcept;

  template <typename Y, typename CtrlBlk>
  static shared_ptr<T> __create_with_control_block(Y* ptr, CtrlBlk* ctrl_blk);
};

template <typename T>
class weak_ptr {
  using element_type = std::remove_extent_t<T>;
  using pointer = element_type*;
  using const_pointer = element_type const*;
  using reference = element_type&;
  using const_reference = element_type const&;

  pointer ptr_ {nullptr};
  shared_weak_count* ctrl_ {nullptr};

public:
  constexpr weak_ptr() noexcept = default;
  weak_ptr(weak_ptr const&) noexcept;
  weak_ptr(weak_ptr &&) noexcept;

  template <typename Y>
  weak_ptr(shared_ptr<Y> const&) noexcept;

  template <compatible_with<T> Y>
  weak_ptr(weak_ptr<Y> const&) noexcept;

  template <compatible_with<T> Y>
  weak_ptr(weak_ptr<Y> &&) noexcept;

  ~weak_ptr();

  weak_ptr& operator=(weak_ptr const&) noexcept;
  weak_ptr& operator=(weak_ptr &&) noexcept;

  void reset() noexcept;

  void swap(weak_ptr&) noexcept;

  long use_count() const noexcept;
  
  bool expired() const noexcept;
  
  shared_ptr<T> lock() const noexcept;

  template <typename Y>
  bool owner_before(weak_ptr<Y> const&) const noexcept;

  template <typename Y>
  bool owner_before(shared_ptr<Y> const&) const noexcept;
};

// implementation of shared_ptr
template <typename T>
constexpr shared_ptr<T>::shared_ptr(std::nullptr_t) noexcept {}

template <typename T>
template <raw_pointer_compatible_with<T> Y>
shared_ptr<T>::shared_ptr(Y* ptr)
  : ptr_(ptr)
{
  using Deleter = shared_ptr_default_delete<T, Y>;
  ctrl_ = new shared_ptr_pointer<Y, Deleter>(ptr, {});
}

template <typename T>
shared_ptr<T>::shared_ptr(shared_ptr const& other) noexcept 
  : ptr_(other.ptr_),
    ctrl_(other.ctrl_)
{
  if (ctrl_) ctrl_->add_shared();
}

template <typename T>
shared_ptr<T>::shared_ptr(shared_ptr && other) noexcept 
  : ptr_(std::exchange(other.ptr_, nullptr)),
    ctrl_(std::exchange(other.ctrl_, nullptr))
{}

template <typename T>
template <compatible_with<T> Y>
shared_ptr<T>::shared_ptr(shared_ptr<Y> const& other) noexcept 
  : ptr_(other.ptr_),
    ctrl_(other.ctrl_)
{
  if (ctrl_) ctrl_->add_shared();
}

template <typename T>
template <compatible_with<T> Y>
shared_ptr<T>::shared_ptr(shared_ptr<Y> && other) noexcept 
  : ptr_(std::exchange(other.ptr_, nullptr)),
    ctrl_(std::exchange(other.ctrl_, nullptr))
{}

template <typename T>
template <compatible_with<T> Y>
shared_ptr<T>::shared_ptr(shared_ptr<Y> const& other, pointer ptr) noexcept 
  : ptr_(ptr),
    ctrl_(other.ctrl_)
{
  if (ctrl_) ctrl_->add_shared();
}

template <typename T>
template <compatible_with<T> Y>
shared_ptr<T>::shared_ptr(weak_ptr<Y> const& weak) 
  : ptr_(weak.ptr_),
    ctrl_(weak.ctrl_ ? weak.ctrl_->lock() : nullptr)
{
  if (ctrl_ == nullptr) {
    throw std::bad_weak_ptr();
  }
}

template <typename T>
shared_ptr<T>& shared_ptr<T>::operator=(shared_ptr const& other) noexcept {
  shared_ptr(other).swap(*this);
  return *this;
}

template <typename T>
shared_ptr<T>& shared_ptr<T>::operator=(shared_ptr && other) noexcept {
  shared_ptr(std::move(other)).swap(*this);
  return *this;
}

template <typename T>
template <compatible_with<T> Y>
shared_ptr<T>& shared_ptr<T>::operator=(shared_ptr<Y> const& other) noexcept {
  shared_ptr(other).swap(*this);
  return *this;
}

template <typename T>
template <compatible_with<T> Y>
shared_ptr<T>& shared_ptr<T>::operator=(shared_ptr<Y> && other) noexcept {
  shared_ptr(std::move(other)).swap(*this);
  return *this;
}

template <typename T>
shared_ptr<T>::~shared_ptr() noexcept {
  if (ctrl_) ctrl_->release_shared();
}

template <typename T>
typename shared_ptr<T>::pointer shared_ptr<T>::get() const noexcept {
  return ptr_;
}

template <typename T>
typename shared_ptr<T>::pointer shared_ptr<T>::operator->() noexcept {
  return get();
}

template <typename T>
typename shared_ptr<T>::const_pointer shared_ptr<T>::operator->() const noexcept {
  return get();
}

template <typename T>
T& shared_ptr<T>::operator*() noexcept {
  return *get();
}

template <typename T>
T const& shared_ptr<T>::operator*() const noexcept {
  return *get();
}

template <typename T>
typename shared_ptr<T>::reference shared_ptr<T>::operator[](std::ptrdiff_t idx) const {
  return ptr_[idx];
}

template <typename T>
shared_ptr<T>::operator bool() const noexcept {
  return ctrl_ != nullptr;
}

template <typename T>
void shared_ptr<T>::swap(shared_ptr& other) noexcept {
  std::swap(ptr_, other.ptr_);
  std::swap(ctrl_, other.ctrl_);
}

template <typename T>
void shared_ptr<T>::reset() noexcept {
  shared_ptr().swap(*this);
}

template <typename T>
long shared_ptr<T>::use_count() const noexcept {
  return ctrl_ ? ctrl_->use_count() : 0;
}

template <typename T>
template <typename Y>
bool shared_ptr<T>::owner_before(shared_ptr<Y> const& other) const noexcept {
  return ctrl_ < other.ctrl_;
}

template <typename T>
template <typename Y>
bool shared_ptr<T>::owner_before(weak_ptr<Y> const& other) const noexcept {
  return ctrl_ < other.ctrl_;
}

template <typename T>
template <typename Y, typename CtrlBlk>
shared_ptr<T> shared_ptr<T>::__create_with_control_block(Y* ptr, CtrlBlk* ctrl_blk) {
  shared_ptr<T> res;
  res.ptr_ = ptr;
  res.ctrl_ = ctrl_blk;
  return res;
}
// implementation of weak_ptr

template <typename T>
weak_ptr<T>::weak_ptr(weak_ptr const& other) noexcept
  : ptr_(other.ptr_),
    ctrl_(other.ctrl_)
{
  if (ctrl_) ctrl_->add_weak();
}

template <typename T>
weak_ptr<T>::weak_ptr(weak_ptr && other) noexcept
  : ptr_(std::exchange(other.ptr_, nullptr)),
    ctrl_(std::exchange(other.ctrl_, nullptr))
{}

template <typename T>
template <compatible_with<T> Y>
weak_ptr<T>::weak_ptr(weak_ptr<Y> const& other) noexcept
  : ptr_(other.ptr_),
    ctrl_(other.ctrl_)
{
  if (ctrl_) ctrl_->add_weak();
}

template <typename T>
template <compatible_with<T> Y>
weak_ptr<T>::weak_ptr(weak_ptr<Y> && other) noexcept
  : ptr_(std::exchange(other.ptr_, nullptr)),
    ctrl_(std::exchange(other.ctrl_, nullptr))
{}

template <typename T>
template <typename Y>
weak_ptr<T>::weak_ptr(shared_ptr<Y> const& other) noexcept 
  : ptr_(other.ptr_),
    ctrl_(other.ctrl_)
{
  if (ctrl_) ctrl_->add_weak();
}

template <typename T>
weak_ptr<T>::~weak_ptr() {
  if (ctrl_) ctrl_->release_weak();
}

template <typename T>
weak_ptr<T>& weak_ptr<T>::operator=(weak_ptr const& other) noexcept {
  weak_ptr(other).swap(*this);
  return *this;
}

template <typename T>
weak_ptr<T>& weak_ptr<T>::operator=(weak_ptr && other) noexcept {
  weak_ptr(std::move(other)).swap(*this);
  return *this;
}

template <typename T>
void weak_ptr<T>::reset() noexcept {
  weak_ptr().swap(*this);
}

template <typename T>
void weak_ptr<T>::swap(weak_ptr& other) noexcept {
  std::swap(ptr_, other.ptr_);
  std::swap(ctrl_, other.ctrl_);
}

template <typename T>
long weak_ptr<T>::use_count() const noexcept {
  return ctrl_ ? ctrl_->use_count() : 0;
}

template <typename T>
bool weak_ptr<T>::expired() const noexcept {
  return use_count() == 0;
}

template <typename T>
shared_ptr<T> weak_ptr<T>::lock() const noexcept {
  shared_ptr<T> ret;
  ret.ctrl_  = ctrl_ ? ctrl_->lock() : nullptr;
  if (ret.ctrl_) {
    ret.ptr_ = ptr_;
  }
  return ret;
}

template <typename T>
template <typename Y>
bool weak_ptr<T>::owner_before(weak_ptr<Y> const& other) const noexcept {
  return ctrl_ < other.ctrl_;
}

template <typename T>
template <typename Y>
bool weak_ptr<T>::owner_before(shared_ptr<Y> const& other) const noexcept {
  return ctrl_ < other.ctrl_;
}

template <typename T>
inline bool operator==(shared_ptr<T> const& p1, shared_ptr<T> const& p2) noexcept {
  return p1.get() == p2.get();
}

template <typename T>
inline bool operator==(shared_ptr<T> const& p1, std::nullptr_t) noexcept {
  return p1.get() == nullptr;
}

template <typename T>
inline bool operator!=(shared_ptr<T> const& p1, shared_ptr<T> const& p2) noexcept {
  return p1.get() != p2.get();
}

template <typename T>
inline bool operator!=(shared_ptr<T> const& p1, std::nullptr_t) noexcept {
  return p1.get() != nullptr;
}

template <typename T, typename... Args>
requires (!std::is_array_v<T> && std::is_constructible_v<T, Args...>)
shared_ptr<T> make_shared(Args&&... args) {
  shared_ptr_emplace<T>* ctrl = new shared_ptr_emplace<T>(std::forward<Args>(args)...);
  return shared_ptr<T>::template __create_with_control_block<T, shared_ptr_emplace<T>>(ctrl->get_elem(), ctrl);
}

/**
 * make_shared<T[N]>()
 */
template <typename T>
requires (std::is_bounded_array_v<T> && std::is_default_constructible_v<std::remove_extent_t<T>>)
shared_ptr<T> make_shared() {
  using CtrlBlk = bounded_array_ctrl_block<T>;
  using Y = std::remove_extent_t<T>;
  CtrlBlk* ctrl = new CtrlBlk();
  return shared_ptr<T>::template __create_with_control_block<Y, CtrlBlk>(ctrl->get_data(), ctrl);
}

/**
 * make_shared<T[N]>(T const& u)
 */
template <typename T>
requires (std::is_bounded_array_v<T> && std::is_copy_constructible_v<base_elem_t<T>>)
shared_ptr<T> make_shared(std::remove_extent_t<T> const& u) {
  using CtrlBlk = bounded_array_ctrl_block<T>;
  using Y = std::remove_extent_t<T>;
  CtrlBlk* ctrl = new CtrlBlk(u);
  return shared_ptr<T>::template __create_with_control_block<Y, CtrlBlk>(ctrl->get_data(), ctrl);
}

/**
 * make_shared<T[]>(size_t n)
 */
template <typename T>
requires (std::is_unbounded_array_v<T> && std::is_default_constructible_v<std::remove_extent_t<T>>)
shared_ptr<T> make_shared(size_t n) {
  using CtrlBlk = unbound_array_ctrl_block<T>;
  using Y = std::remove_extent_t<T>;
  void* tmp = ::operator new(CtrlBlk::bytes_for(n), std::align_val_t(alignof(CtrlBlk)));
  CtrlBlk* ctrl = new (tmp) CtrlBlk(n);
  return shared_ptr<T>::template __create_with_control_block<Y, CtrlBlk>(ctrl->get_data(), ctrl);
}

/**
 * make_shared<T[]>(size_t N, T const& u)
 */
template <typename T>
requires (std::is_unbounded_array_v<T> && std::is_copy_constructible_v<base_elem_t<T>>)
shared_ptr<T> make_shared(size_t n, std::remove_extent_t<T> const& u) {
  using CtrlBlk = unbound_array_ctrl_block<T>;
  using Y = std::remove_extent_t<T>;
  void* tmp = ::operator new(CtrlBlk::bytes_for(n), std::align_val_t(alignof(CtrlBlk)));
  CtrlBlk* ctrl = new (tmp) CtrlBlk(n, u);
  return shared_ptr<T>::template __create_with_control_block<Y, CtrlBlk>(ctrl->get_data(), ctrl);
}

template <typename T>
void swap(shared_ptr<T>& p1, shared_ptr<T>& p2) noexcept {
  p1.swap(p2);
}

} // namespace evo
