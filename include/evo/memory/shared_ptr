// -*- C++ -*-
// Date:   Sat Apr 13 15:41:46 2024
// Mail:   lunar_ubuntu@qq.com
// Author: https://github.com/xiaoqixian

#pragma once

#include <atomic>
#include <cstddef>
#include <type_traits>
#include <utility>
#include <cassert>

namespace evo {

template <typename T>
class shared_ptr;

namespace {

struct shared_count {
  std::atomic_long shared_count_ {0};

  void add_shared() noexcept {
    shared_count_.fetch_add(1);
  }

  bool release_shared() noexcept {
    if (shared_count_.fetch_sub(1) == 0) {
      on_zero_shared();
      return true;
    }
    return false;
  }

  long use_count() noexcept {
    return shared_count_.load();
  }
  
  virtual void on_zero_shared() noexcept = 0;

protected:
  virtual ~shared_count();
};

struct shared_weak_count: private shared_count {
  std::atomic_long weak_count_ {0};

  void add_weak() noexcept {
    weak_count_.fetch_add(1);
  }

  shared_weak_count* lock() noexcept;

private:
  virtual void on_zero_shared_weak() noexcept = 0;

protected:
  ~shared_weak_count() override;
};

template <typename T>
struct shared_ptr_pointer: shared_count {
  T* ptr_ {nullptr};

  template <typename U>
  requires std::is_convertible_v<U*, T*>
  shared_ptr_pointer(U* ptr): ptr_(ptr) {}

  virtual void on_zero_shared() noexcept override {
    ptr_->~T();
    delete ptr_;
  }
};

template <typename T>
struct shared_ptr_emplace: shared_count {
  T storage_;

  template <typename... Args>
  requires std::is_constructible_v<T, Args...>
  shared_ptr_emplace(Args&&... args): storage_(std::forward<Args>(args)...) {}
  
  void on_zero_shared() noexcept override {
    delete this;
  }

  T* get_elem() {
    return &storage_;
  }
};


struct build_helper {
  template <typename T, typename Y, typename CtrlBlk>
  static shared_ptr<T> create_with_control_block(Y* ptr, CtrlBlk* ctrl_blk) {
    shared_ptr<T> res;
    res.ptr_ = ptr;
    res.ctrl_ = ctrl_blk;
    return res;
  }
  
};

} // anonymous namespace

template <typename T>
class shared_ptr {
  friend class build_helper;

  using value = T;
  using pointer = T*;
  using const_pointer = T const*;
  using reference = T&;
  using const_reference = T const&;

  using ctrl_block = shared_count;

  pointer ptr_ {nullptr};
  ctrl_block* ctrl_ {nullptr};
public:
  shared_ptr() noexcept = default;

  template <typename U>
  requires std::is_convertible_v<U*, pointer>
  shared_ptr(U* ptr): ptr_(ptr) {
    ctrl_ = new shared_ptr_pointer(ptr);
  }

  shared_ptr(shared_ptr const& other) noexcept {
    ptr_ = other.ptr_;
    ctrl_ = other.ctrl_;
    if (ctrl_)
      ctrl_->add_shared();
  }

  shared_ptr(shared_ptr && other) noexcept {
    ptr_ = std::exchange(other.ptr_, nullptr);
    ctrl_ = std::exchange(other.ctrl_, nullptr);
  }

  shared_ptr& operator=(shared_ptr const& other) noexcept {
    shared_ptr(other).swap(*this);
    return *this;
  }

  shared_ptr& operator=(shared_ptr && other) noexcept {
    shared_ptr(std::move(other)).swap(*this);
    return *this;
  }

  ~shared_ptr() noexcept {
    if (ctrl_) {
      ctrl_->release_shared();
    }
  }

  pointer get() noexcept {
    return ptr_;
  }
  const_pointer get() const noexcept {
    return ptr_;
  }

  pointer operator->() noexcept {
    return get();
  }
  const_pointer operator->() const noexcept {
    return get();
  }

  reference operator*() noexcept {
    return *get();
  }
  const_reference operator*() const noexcept {
    return *get();
  }

  void swap(shared_ptr& other) noexcept {
    std::swap(ptr_, other.ptr_);
    std::swap(ctrl_, other.ctrl_);
  }

  void reset() noexcept {
    shared_ptr().swap(*this);
  }
};

template <typename T, typename... Args>
requires std::is_constructible_v<T, Args...>
shared_ptr<T> make_shared(Args&&... args) {
  shared_ptr_emplace<T>* ctrl = new shared_ptr_emplace<T>(std::forward<Args>(args)...);
  return build_helper::create_with_control_block<T, T, shared_ptr_emplace<T>>(ctrl->get_elem(), ctrl);
}

template <typename T>
inline bool operator==(shared_ptr<T> const& p1, shared_ptr<T> const& p2) noexcept {
  return p1.get() == p2.get();
}

template <typename T>
inline bool operator==(shared_ptr<T> const& p1, std::nullptr_t) noexcept {
  return p1.get() == nullptr;
}

template <typename T>
inline bool operator!=(shared_ptr<T> const& p1, shared_ptr<T> const& p2) noexcept {
  return p1.get() != p2.get();
}

template <typename T>
inline bool operator!=(shared_ptr<T> const& p1, std::nullptr_t) noexcept {
  return p1.get() != nullptr;
}

} // namespace evo
