// -*- C++ -*-
// Date: Wed Nov 22 23:37:35 2023
// Mail: lunar_ubuntu@qq.com
// Author: https://github.com/xiaoqixian

#ifndef _OPTIONAL_HPP
#define _OPTIONAL_HPP

#include "evo/type_traits"
#include "evo/exception"
#include <functional>

namespace evo {

class bad_optional_access: public evo::exception {
  virtual const char* what() const noexcept {
    return "bad_optional_access";
  }

  virtual ~bad_optional_access() noexcept {}
};

template <typename T>
class optional {
private:
  struct CheckOptionalArgsConstructor {
    template <typename U>
    static constexpr bool enable_implicit() {
      return evo::is_constructible<T, U&&>::value &&
        evo::is_convertible<U&&, T>::value;
    }

    template <typename U>
    static constexpr bool enable_explicit() {
      return evo::is_constructible<T, U&&>::value &&
        !evo::is_convertible<U&&, T>::value;
    }
  };

  template <typename U>
  static constexpr bool can_bind_reference() {
    using RawU = remove_reference_t<U>;
    using UPtr = RawU*;
    using RawT = remove_reference_t<T>;
    using TPtr = RawT*;
    using CheckLvalueArg = bool_constant<
      (is_lvalue_reference<U>::value && is_convertible<UPtr, TPtr>::value) ||
      is_same<U, std::reference_wrapper<T>>::value ||
      is_same<U, std::reference_wrapper<typename remove_const<RawT>::type>>::value
    >;
    return (is_lvalue_reference<T>::value && CheckLvalueArg::value)
      || (is_rvalue_reference<T>::value && !is_lvalue_reference<U>::value && is_convertible<UPtr, TPtr>::value);
  }

public:
  constexpr optional() noexcept: val(nullptr) {}

  /// Copy constructor (default)
  /// this constructor only accepts optional<T> const& type argugment
  constexpr optional(optional const&) = default;
  
  /// Move constructor (default)
  /// this constructor only accepts optional<T> && type argugment
  constexpr optional(optional &&) = default;

  /// Copy constructor (implicit)
  /// constructs with a optional with a different value type U
  /// but T is constructible with U const& and
  /// U const& can convert to T
  template <typename U = T, typename enable_if<
    is_constructible<T, U const&>::value &&
    is_convertible<U const&, T>::value
    , int>::type = 0>
  constexpr optional(optional<U> const& u): val(address_of(u)) {
    static_assert(can_bind_reference<U>(), 
      "Attempted to bind a reference element in tuple from a possible temporary");
  }
  
  /// Copy constructor (implicit)
  /// constructs with a optional with a different value type U
  /// but T is constructible with U const& and
  /// U const& can convert to T
  template <typename U = T, typename enable_if<
    is_constructible<T, U const&>::value &&
    !is_convertible<U const&, T>::value
    , int>::type = 0>
  constexpr explicit optional(optional<U> const& u) {
    if (u.has_value()) {
      this->val = address_of(T(u.get()));
    } else {
      this->val = nullptr;
    }
  }

  /// Move constructor
  /// enable implicit
  template <typename U = T, typename evo::enable_if<
    CheckOptionalArgsConstructor::template enable_implicit<U>()
    , int>::type = 0>
  constexpr optional(U&& u): val(address_of(u)) {
    //TODO static_assert U can bind reference
  }

  /// Move constructor
  /// enable explicit 
  template <typename U = T, typename evo::enable_if<
    CheckOptionalArgsConstructor::template enable_explicit<U>()
    , int>::type = 0>
  constexpr explicit optional(U&& u): val(address_of(u)) {}

  constexpr bool has_value() const noexcept {
    return this->val != nullptr;
  }

  constexpr T& get() & {
    if (!this->has_value()) {
      throw bad_optional_access();
    } 
    return *this->val;
  }

  constexpr T const& get() const& {
    if (!this->has_value()) {
      throw bad_optional_access();
    }
    return *this->val;
  }
private:
  typedef remove_cv_ref_t<T> raw_type;

  // whether optional contains a value deterines
  // on if val == nullptr
  raw_type* val;
};

}

#endif // _OPTIONAL_HPP
